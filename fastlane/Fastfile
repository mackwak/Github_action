# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Submit a new Beta Build to Crashlytics Beta"
  lane :beta do
    gradle(task: "clean assembleRelease")
    crashlytics
  
    # sh "your_script.sh"
    # You can also use other beta testing services here
  end



lane :build do |options|
    # Get the build type from the options passed to the lane.
    # It defaults to 'debug' if no type is provided.
    build_type = options[:build_type] || 'debug'

    # Ensure the build type is valid to prevent errors.
    unless ['debug', 'qa', 'release'].include?(build_type)
      UI.user_error!("Invalid build_type specified. Use 'debug', 'qa', or 'release'.")
    end

    UI.message("ðŸš€ Starting build for variant: #{build_type}...")

    # Run the Gradle task to build the app.
    # The task name is dynamically created based on the build_type.
    # e.g., 'assembleQa', 'assembleRelease', 'assembleDebug'
    gradle(
      task: "assemble#{build_type.capitalize}"
    )
    firebase_app_distribution(
    app: "1:451635728068:android:f1bd79b08e232e5dcf8391", # Replace with your Firebase App ID
    apk_path: "app/build/outputs/apk/qa/app-qa.apk", # Adjust path as needed
    release_notes: "New build with bug fixes and features.",
    groups: "wow" # Optional: Distribute to a specific tester group
    )

    UI.success("âœ… Build successful for variant: #{build_type}!")
    # The generated APK/AAB will be in app/build/outputs/
  end






  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end
end
